// Firebase Storage Security Rules for Tripsera
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isCustomer() {
      return isAuthenticated() && 
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'customer';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Validate file type
    function isValidImage() {
      return resource.contentType.matches('image/.*');
    }
    
    function isValidDocument() {
      return resource.contentType.matches('application/pdf') ||
             resource.contentType.matches('image/.*');
    }
    
    // Validate file size (5MB max for images, 10MB max for documents)
    function isValidImageSize() {
      return resource.size < 5 * 1024 * 1024; // 5MB
    }
    
    function isValidDocumentSize() {
      return resource.size < 10 * 1024 * 1024; // 10MB
    }
    
    // Destination images
    match /destinations/{destinationId}/{fileName} {
      allow read: if true; // Public read access
      allow write: if isAdmin() && isValidImage() && isValidImageSize();
      allow delete: if isAdmin();
    }
    
    // Gallery images
    match /gallery/{fileName} {
      allow read: if true; // Public read access
      allow write: if isAdmin() && isValidImage() && isValidImageSize();
      allow delete: if isAdmin();
    }
    
    // Profile pictures
    match /profile-pics/{userId}/{fileName} {
      allow read: if true; // Public read access
      allow write: if isOwner(userId) && isValidImage() && isValidImageSize();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Documents (passports, visas, etc.)
    match /documents/{userId}/{fileName} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) && isValidDocument() && isValidDocumentSize();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Temporary uploads
    match /temp/{userId}/{fileName} {
      allow read, write, delete: if isOwner(userId);
    }
    
    // Admin uploads
    match /admin/{fileName} {
      allow read, write, delete: if isAdmin();
    }
    
    // Default deny rule
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
